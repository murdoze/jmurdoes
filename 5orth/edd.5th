\ ************
\ Block editor
\ ************

\ Shortcuts

: let constant ;
: var ( v "name" -- ) create , does> ;

\ Blocks

1024 let blks#
1024 let blk-size
64 let line-size
blk-size line-size / let lines-in-block
blks# blk-size * let blk-area

create block0 blk-area allot
block0 blk-area bl fill
0 var current-blk

: block ( n -- a ) blk-size * block0 + current-blk ! ;
: line ( n -- n*line-len ) line-size * ;

: b! ( c a -- ) \ sets character at given offset relative to current block
  current-blk + c! ;


\ Block file I/O

0 value blk-fd

: open-blk ( addr u -- )  r/w open-file throw to blk-fd ;
: read-blk ( -- ) block0 blk-area blk-fd read-file throw ;
: write-blk ( -- ) block0 blk-area blk-fd write-file throw ;
: close-blk ( -- ) blk-fd close-file throw -1 to blk-fd ;

s" data.blk" open-blk read-blk cr cr . cr cr

: wb ( -- ) \ write blocks 
  write-blk close-blk 
  bye ;

\ Sample usage

42
3 block 5 line 16 + b!


: .screen ( -- )
  current-blk @
  cr
  lines-in-block 0 do
    i 9 <= if bl emit then
    i . dup line-size 1- type
    [char] | emit cr
    line-size +
  loop
  cr
;

require unicode.5th
require colors.5th

\ clear 41 21 at 50 20 red reverse win 40 20 at 50 20 yellow reverse b-win  norm white home

40 var edd-x
5 var edd-y

: .screen ( -- )
  edd-x @ edd-y @  at 
  line-size 2 + lines-in-block yellow reverse b-win
  norm white home

  current-blk @
  cr
  lines-in-block 0 do
    edd-x @ 1+ edd-y @ 1+ i + at
    i green hex . decimal norm
    dup line-size 1- type 
    green [char] | emit norm 
    line-size +
  loop
  cr
;


