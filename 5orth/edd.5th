\ ************
\ Block editor
\ ************

\ Shortcuts

: let constant ;
: var ( v "name" -- ) create , does> ;

: enum ( start count count*"name" -- )
  over + swap
  do i let loop ;

1 3 enum Normal Insert Replace
Normal var mode

\ Blocks

1024 let blks#
1024 let blk-size
64 let line-size
blk-size line-size / let lines-in-block
blks# blk-size * let blk-area

create block0 blk-area allot
block0 blk-area bl fill
block0 var current-blk
0 var blk

: block ( n -- a ) blk-size * block0 + current-blk ! ;
: line ( n -- n*line-len ) line-size * ;

: b! ( c a -- ) \ sets character at given offset relative to current block
  current-blk + c! ;


\ Block file I/O

0 value blk-fd

: open-blk ( addr u -- )  r/w open-file throw to blk-fd ;
: read-blk ( -- ) block0 blk-area blk-fd read-file throw ;
: write-blk ( -- ) block0 blk-area blk-fd write-file throw ;
: close-blk ( -- ) blk-fd close-file throw -1 to blk-fd ;

s" data.blk" open-blk read-blk cr cr . cr cr

: wb ( -- ) \ write blocks 
  write-blk close-blk 
  bye ;

\ Screen eddittor

require unicode.5th
require colors.5th

40 var edd-x
5 var edd-y

: .screen ( -- )
  edd-x @ 1 - edd-y @  at 
  line-size 0 + lines-in-block yellow reverse b-win
  norm white home

  current-blk @
  cr
  lines-in-block 0 do
    edd-x @   edd-y @ 1+ i + at
    \ i green hex . decimal norm
    dup line-size 1- type 
    green [char] | emit norm 
    line-size +
  loop
  drop
  cr
;

\ Eddittor Edd

1 var edd-row
0 var edd-col

: show-cursor
    edd-row @ edd-y @ +
    edd-col @ edd-x @ +
    swap at
;

\ Eddittor Actions

: edd-quit 
  ." Quit"
  r> drop r> drop 
;

: cursor-left
  -1 edd-col +!
;

: cursor-right
  1 edd-col +!
;

: cursor-up
  -1 edd-row +!
;

: cursor-down
  1 edd-row +!
;

: cursor-first-col
  0 edd-col !
;
 
: cursor-last-col
   line-size edd-col !
;
 
: cursor-home
   0 edd-col !
   0 edd-row !
;
 
: cursor-unhome
   0 edd-col !
   lines-in-block edd-row !
;

: block-back
  blk @ dup 0> if
    1- dup blk ! block
  then
;  

: block-forward
  blk @ dup blks# < if
    1+ dup blk ! block
  then
;  
 
create edd-actions
  char Q , ' edd-quit ,
  char Z , ' edd-quit ,
  ( ^D)4 , ' edd-quit ,
  char B , ' block-back ,
  char F , ' block-forward ,
  char h , ' cursor-left ,
  char D , ' cursor-left ,
  char l , ' cursor-right ,
  char C , ' cursor-right ,
  char j , ' cursor-down ,
  char B , ' cursor-down ,
  char k , ' cursor-up ,
  char A , ' cursor-up ,
  char 0 , ' cursor-first-col ,
  char ` , ' cursor-last-col ,
  char H , ' cursor-home ,
  char G , ' cursor-unhome ,
  0      , 

: edd-process ( key -- )
  edd-actions
  begin		                     ( key ea --)
    dup @ dup                        ( key ea c c -- )
    0=                               ( key ea c f -- )
    if 
      drop drop drop                 ( -- )
      exit 
    then      
                                     ( key ea c -- )
    rot swap over                    ( c key key ea -- ) 
      
    = if ( ea key -- )
      drop cell + @ 
      execute     ( ea+cell -- )
      exit
    else
      swap
      cell + cell + 
    then
  again
;

: show-key
  dup 
  5 5 at yellow emit bl emit green  . norm 
;
: show-stack
  ( 5 1 at ) white .s norm 
;

: show-block
  .screen
;

: edd
  begin
    \ show-stack    
    show-block    
    show-cursor
    key 
    \ show-key 
    edd-process 
    show-cursor
  again
;

clear
0 block .screen
edd

