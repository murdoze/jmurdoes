\ ************
\ Block editor
\ ************

\ Imports

require unicode.5th
require colors.5th

\ Shortcuts

decimal 

: let constant ;
: var ( v "name" -- ) create , does> ;

: enum ( start count count*"name" -- )
  over + swap
  do i let loop ;

1 3 enum Normal Insert Replace
Normal var mode

\ Blocks

\ 1024 let blks#
8 let blks#
1024 let blk-size
64 let cols#
blk-size cols# / let lines#
blks# blk-size * let blk-area

create block0 blk-area allot
block0 blk-area 32 fill

: cr-fill ( block1 count -- )
  0 do
    cols# + dup 32 swap c!
  loop
  drop    
;
block0
blks# lines# * cr-fill

0 var blk

: block ( n -- a ) dup blk ! blk-size * block0 + ;
: line ( n -- n*cols# ) cols# * ;

\ Block file I/O

0 value blk-fd

: open-blk ( addr u -- )  r/w open-file throw to blk-fd ;
: read-blk ( -- ) block0 blk-area blk-fd read-file throw ;
: seek-blk0 ( -- ) 0 blk-fd reposition-file drop ;
: write-blk ( -- ) block0 blk-area blk-fd write-file throw ;
: close-blk ( -- ) blk-fd close-file throw -1 to blk-fd ;

\ s" data.blk" open-blk read-blk cr cr . cr cr

\ : wb  write-blk close-blk ;

\ Screen eddittor

21 var edd-x
5 var edd-y

: .screen ( -- )
  edd-x @ 1 - edd-y @  at 
  cols# 0 + lines# yellow ( reverse ) b-win
  norm white home

  blk @ block
  cr
  lines# 0 do
    edd-x @ edd-y @ 1+ i + at
    dup cols# 1- type 
    green norm 
    cols# +
  loop
  drop 
  cr
;

\ Eddittor Edd

1 var edd-row
0 var edd-col

: cursor-addr ( -- a )
  edd-row @ 1- cols#  * edd-col @ + blk @ block +
;

: bound-row-up    edd-row @ 1 < if 1 edd-row ! then ;
: bound-row-down  edd-row @ lines# > if lines# edd-row ! then ;
: bound-col-left  edd-col @ 0 < if 0 edd-col ! then ;
: bound-col-right edd-col @ cols# 2 - > if cols# 2 - edd-col ! then ;

0 var latest-key

\ Eddittor Actions

: edd-quit           r> drop r> drop ;
: edd-save-quit      ( seek-blk0 write-blk ) r> drop r> drop ;
: cursor-left       -1 edd-col +!  bound-col-left ;
: cursor-right       1 edd-col +!  bound-col-right ;
: cursor-up         -1 edd-row +!  bound-row-up ;
: cursor-down        1 edd-row +!  bound-row-down ;
: cursor-first-col   0 edd-col ! ;
: cursor-last-col    cols# 2 - edd-col ! ;
: cursor-home        0 edd-col !  1 edd-row ! ;
: cursor-unhome      0 edd-col !  lines# edd-row ! ;

: block-back
  blk @ dup 0> if
    1- dup blk ! block drop exit
  then drop ;  

: block-forward
  blk @ dup blks# 1- < if
    1+ dup blk ! block drop exit
  then drop ;   

: insert-mode Insert mode ! ;
: normal-mode  mode @ Normal = if Insert else Normal then mode ! ;

: replace-char
;

: insert-char 
;

: backspace
;
 
create normal-actions
  char  Q , ' edd-quit ,
  char  Z , ' edd-save-quit ,
  ( ^D) 4 , ' edd-quit ,
  char  G , ' block-back ,
  char  F , ' block-forward ,
  char  h , ' cursor-left ,
  char  D , ' cursor-left ,
  char  l , ' cursor-right ,
  char  C , ' cursor-right ,
  char  j , ' cursor-down ,
  char  B , ' cursor-down ,
  char  k , ' cursor-up ,
  char  A , ' cursor-up ,
  char  0 , ' cursor-first-col ,
  char  ` , ' cursor-last-col ,
  char  H , ' cursor-home ,
  char  G , ' cursor-unhome ,
  char  i , ' insert-mode ,
  ( TAB)9 , ' normal-mode ,
  \ ------
        0 , 

: normal-process ( key -- )
  normal-actions
  begin		                     ( key ea --)
    dup @ dup                        ( key ea c c -- )
    0=                               ( key ea c f -- )
    if 
      drop drop drop                 ( -- )
      exit 
    then      
                                     ( key ea c -- )
    rot swap over                    ( c key key ea -- ) 
      
    = if ( ea key -- )
      drop cell + @ 
      execute     ( ea+cell -- )
      exit
    else
      swap
      cell + cell + 
    then
  again
;

: insert-process ( c -- )
  dup   9 = if normal-mode drop exit then
  dup  13 = if 0 edd-col ! 1 edd-row +! bound-row-down drop exit then
  dup  10 = if normal-mode drop exit then
  dup  16 = if drop exit then
  dup  27 = if normal-mode drop exit then
  dup 127 = if backspace drop exit then
  drop latest-key c@ cursor-addr c!

  edd-col @ cols# 1- = if
  else 1 edd-col +! then  
;

: show-cursor
    edd-row @ edd-y @ +
    edd-col @ edd-x @ +
    swap at
;

: show-key
  dup 
  5 5 at yellow emit bl emit green  . norm 
;
: show-stack
  5 1 at white .s norm 
;

: show-block .screen ;

: show-status
    edd-x @ 1 + edd-y @ at
    green
      ." BLK# " blk @ . bold
    white
      mode @ Normal = if ." -- NORMAL -- " else ." -- INSERT -- " then
    norm
;

: edd
  begin
    show-stack    
    \ save
    show-block
    show-status
    show-cursor
    key dup latest-key c!
    mode @ Normal = if 
      normal-process 
    else
      insert-process
    then
    \ restore
    \ show-cursor
  again
;

clear
\ 0 block .screen
\ edd
.s
